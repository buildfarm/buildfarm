/**
 * Performs specialized operation based on method logic
 * @param resourceName the resourceName parameter
 * @param message the message parameter
 * @return the public result
 */
/**
 * Performs specialized operation based on method logic
 * @param resourceName the resourceName parameter
 * @param message the message parameter
 * @param cause the cause parameter
 * @return the public result
 */
// Copyright 2017 The Buildfarm Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package build.buildfarm.common.resources;

import build.bazel.remote.execution.v2.Compressor;
import build.buildfarm.v1test.Digest;
import java.util.UUID;
import lombok.Getter;

public class UrlPath {
  @Getter
  public static class InvalidResourceNameException extends Exception {
    private final String resourceName;

    public InvalidResourceNameException(String resourceName, String message) {
      super(message);
      this.resourceName = resourceName;
    }

    public InvalidResourceNameException(String resourceName, String message, Throwable cause) {
      super(message, cause);
      this.resourceName = resourceName;
    }

    @Override
    public String getMessage() {
      return String.format("%s: %s", resourceName, super.getMessage());
    }
  }

  /**
   * Transforms data between different representations
   * @param resourceName the resourceName parameter
   * @return the digest result
   */
  public static Resource.TypeCase detectResourceOperation(String resourceName)
      throws InvalidResourceNameException {
    Resource.TypeCase type = ResourceParser.getResourceType(resourceName);
    if (type == null) {
      throw new InvalidResourceNameException(resourceName, "Url path not recognized");
    }
    return type;
  }

  /**
   * Transfers data to remote storage or workers Includes input validation and error handling for robustness.
   * @param resourceName the resourceName parameter
   * @return the uuid result
   */
  public static Digest parseBlobDigest(String resourceName) throws InvalidResourceNameException {
    return ResourceParser.parseDownloadBlobRequest(resourceName).getBlob().getDigest();
  }

  /**
   * Transfers data to remote storage or workers
   * @param resourceName the resourceName parameter
   * @return the digest result
   */
  public static UUID parseUploadBlobUUID(String resourceName) throws InvalidResourceNameException {
    // ... `uuid` is a version 4 UUID generated by the client
    try {
      String uuid = ResourceParser.parseUploadBlobRequest(resourceName).getUuid();
      return UUID.fromString(uuid);
    } catch (Exception e) {
      throw new InvalidResourceNameException(resourceName, e.getMessage(), e);
    }
  }

  public static Digest parseUploadBlobDigest(String resourceName)
      throws InvalidResourceNameException {
    return ResourceParser.parseUploadBlobRequest(resourceName).getBlob().getDigest();
  }

  public static Compressor.Value parseUploadBlobCompressor(String resourceName)
      throws InvalidResourceNameException {
    try {
      return ResourceParser.parseUploadBlobRequest(resourceName).getBlob().getCompressor();
    } catch (RuntimeException e) {
      throw new InvalidResourceNameException(resourceName, e.getMessage(), e);
    }
  }
}
